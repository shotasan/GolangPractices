// No.11
// Our football team finished the championship. The result of each match look like "x:y". Results of all matches are recorded in the collection.
// For example: ["3:1", "2:2", "0:1", ...]
// Write a function that takes such collection and counts the points of our team in the championship. Rules for counting points for each match:
// if x>y - 3 points
// if x<y - 0 point
// if x=y - 1 point
// Notes:
// there are 10 matches in the championship
// 0 <= x <= 4
// 0 <= y <= 4

// My
func Points(games []string) int {
  var result int
  for _, v := range games {
    if v[0] > v[2] {
      result += 3
    } else if v[0] == v[2] {
      result += 1
    }
  }
  return result;
}

// Best
import ( "strings" )

func Points(games []string) int {
  result := 0
  for _, game := range games {
    str := strings.Split(game, ":")
    x, y := str[0], str[1]
    switch {
      case x > y:
        result += 3
      case x == y:
        result += 1
    }
  }
  return result
}

// No.12
// The two oldest ages function/method needs to be completed. It should take an array of numbers as its argument and return the two highest numbers within the array. The returned value should be an array in the format [second oldest age, oldest age].
// The order of the numbers passed in could be any order. The array will always include at least 2 items.
// For example:
// TwoOldestAges([]int{1, 5, 87, 45, 8, 8}) // should return [2]int{45, 87}

// My
import "sort"

func TwoOldestAges(ages []int) [2]int {
  sort.Sort(sort.IntSlice(ages))
  return [2]int{ages[len(ages)-2], ages[len(ages)-1]}
}

// Best
func TwoOldestAges(ages []int) [2]int {
  a, b := 0, 0
  for _, v := range ages {
    if v > b {
      a, b = b, v
    } else if v > a {
      a = v
    }
  }
  return [2]int{a, b}
}

// No.13
// Sum Even Fibonacci Numbers
// Write a func named SumEvenFibonacci that takes a parameter of type int and returns a value of type int
// Generate all of the Fibonacci numbers starting with 1 and 2 and ending on the highest number before exceeding the parameter's value
// Each new number in the Fibonacci sequence is generated by adding the previous two numbers - by starting with 1 and 2(the input could be smaller), the first 10 numbers will be:
//  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// Sum all of the even numbers you generate and return that int
// Example:
// sumEvenFibonacci(8) // returns 10 by adding the even values 2 and 8

// My
func SumEvenFibonacci(limit int) int {
  result := 2
  a, b := 1, 2
  for b <= limit {
    tmp := a + b
    if tmp % 2 == 0 {
      result += tmp
    }
    a = b
    b = tmp
  }
  return result
}

// Best
func SumEvenFibonacci(limit int) int {
  sum, a, b := 2, 1, 2
  for b <= limit {
    a, b = b, a + b
    if b % 2 == 0 { sum += b }
  }
  return sum
}

// No.14
// My friend wants a new band name for her band. She like bands that use the formula: "The" + a noun with the first letter capitalized, for example:
// "dolphin" -> "The Dolphin"
// However, when a noun STARTS and ENDS with the same letter, she likes to repeat the noun twice and connect them together with the first and last letter, combined into one word (WITHOUT "The" in front), like this:
// "alaska" -> "Alaskalaska"
// Complete the function that takes a noun as a string, and returns her preferred band name written as a string.

// My
import "strings"

func bandNameGenerator(word string) string {
  if word[:1] != word[len(word)-1:] {
    return "The " + strings.ToUpper(word[:1]) + word[1:len(word)]
  }
  return strings.ToUpper(word[:1]) + word[1:len(word)] + word[1:len(word)]
}

// Best
import "strings"

func bandNameGenerator(word string) string {
  first := word[:1]
  last := word[len(word)-1:]

  if first != last {
    return "The " + strings.Title(word)
  }

  return strings.Title(word) + word[1:]
}

// No.15
// This time no story, no theory. The examples below show you how to write function accum:
// Examples:
// accum("abcd") -> "A-Bb-Ccc-Dddd"
// accum("RqaEzty") -> "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"
// accum("cwAt") -> "C-Ww-Aaa-Tttt"
// The parameter of accum is a string which includes only letters from a..z and A..Z.

// My
import "strings"

func Accum(s string) string {
    var strs []string
    for i, v := range s {
      tmp := strings.Repeat(strings.ToLower(string(v)), i + 1)
      strs = append(strs, strings.Title(tmp))
    }
    return strings.Join(strs, "-")
}

// Best
import "strings"

func Accum(s string) string {
    parts := make([]string, len(s))
    
    for i := 0; i < len(s); i++ {
      parts[i] = strings.ToUpper(string(s[i])) + strings.Repeat(strings.ToLower(string(s[i])), i)
    }
    
    return strings.Join(parts, "-")
}

// No.16
// Friday 13th or Black Friday is considered as unlucky day. Calculate how many unlucky days are in the given year.
// Find the number of Friday 13th in the given year.
// Input: Year as an integer.
// Output: Number of Black Fridays in the year as an integer.
// Examples:
// unluckyDays(2015) == 3
// unluckyDays(1986) == 1

// My
import "time"

func UnluckyDays(year int) int {
  count := 0
  for i := 1; i <= 12; i++ {
    t := time.Date(year, time.Month(i), 13, 0, 0, 0, 0, time.Local)
    if t.Weekday().String() == "Friday" {
      count ++
    }
  }
  return count
}

// Best
import "time"

func UnluckyDays(year int) int {
  tot := 0
  for m:=1; m<=12; m++ {
    if time.Date(year, time.Month(m), 13, 0, 0, 0, 0, time.UTC).Weekday() == 5 {
      tot++
    }
  }
  return tot
}